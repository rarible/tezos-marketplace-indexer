tezos-marketplace-indexer-template: &tezos-marketplace-indexer-template
  image:
    repository: tezos-marketplace-indexer
  command: [ "./entrypoint.sh", '{{ include "app.env" $ }}', "rarible", "false"]
  environments:
    APPLICATION_ENVIRONMENT: '{{ include "app.env" $ }}'
    KAFKA_ENABLED: "true"
    KAFKA_SECURITY_PROTOCOL: "PLAINTEXT"
    UNION_API: 'http://protocol-union-api.{{ include "app.env" $ }}-protocol:8080'
    # provided via secrets
    # POSTGRES_HOST:
    # POSTGRES_DB:
    # POSTGRES_USER:
    # POSTGRES_PASS:
    # KAFKA_ADDRESS:
    # KAFKA_SASL_MECHANISM:
    # KAFKA_USERNAME:
    # KAFKA_PASSWORD:
    HASURA_URL: 'http://hasura:8080'
    # HASURA_GRAPHQL_ADMIN_SECRET:
  livenessProbe: false
  readinessProbe: false
#  resources:
#     requests:
#       cpu: '4'
#       memory: 2Gi
#     limits:
#       cpu: '4'
#       memory: 2Gi

tezos-marketplace-indexer-rarible:
  <<: *tezos-marketplace-indexer-template
  command: [ "./entrypoint.sh", '{{ include "app.env" $ }}', "rarible", "false"]

tezos-marketplace-indexer-marketplaces:
  <<: *tezos-marketplace-indexer-template
  command: [ "./entrypoint.sh", '{{ include "app.env" $ }}', "marketplaces", "false"]

tezos-marketplace-indexer-metadata:
  <<: *tezos-marketplace-indexer-template
  command: [ "./entrypoint.sh", '{{ include "app.env" $ }}', "metadata", "false"]

tezos-marketplace-indexer-royalties:
  <<: *tezos-marketplace-indexer-template
  command: [ "./entrypoint.sh", '{{ include "app.env" $ }}', "royalties", "false"]

tezos-marketplace-indexer-ophash:
  <<: *tezos-marketplace-indexer-template
  command: [ "./entrypoint.sh", '{{ include "app.env" $ }}', "ophash", "false"]

hasura:
  updateConfig:
    order: start-first
  image:
    registry: docker.io
    repository: hasura/graphql-engine
    tag: v2.16.1
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  service:
    enabled: true
  podAnnotations:
    prometheus.io/scrape: 'false'
    fluentbit.io/exclude: 'true'
  livenessProbe:
    httpGet:
      path: /healthz
  readinessProbe:
    httpGet:
      path: /healthz
  environments:
    HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
    HASURA_GRAPHQL_DEV_MODE: "false"
    HASURA_GRAPHQL_LOG_LEVEL: "warn"
    HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup, http-log, webhook-log, websocket-log, query-log"
    HASURA_GRAPHQL_UNAUTHORIZED_ROLE: user
    HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
    # provided via secrets
    # HASURA_GRAPHQL_ADMIN_SECRET:
    # HASURA_GRAPHQL_DATABASE_URL:
    HASURA_GRAPHQL_PG_TIMEOUT: 30
    HASURA_GRAPHQL_PG_CONN_LIFETIME: 30
    HASURA_GRAPHQL_PG_CONNECTIONS: 100
tzkt:
  updateConfig:
    order: start-first
  instances: []
  api:
    image:
      repository: mystdeim/tzkt-api
      tag: 1.10.2
    resources:
      limits:
        cpu: 300m
        memory: 768Mi
      requests:
        cpu: 100m
        memory: 512Mi
  indexer:
    image:
      repository: mystdeim/tzkt-indexer
      tag: 1.10.2
    resources:
      limits:
        cpu: 300m
        memory: 384Mi
      requests:
        cpu: 100m
        memory: 192Mi
  service:
    port: 5000
    # nodePort:
  environments:
    Logging__LogLevel__Default: Warning
    TokenMetadata__DipDup__Url: http://hasura:8080/v1/graphql
    TezosNode__Endpoint: http://dev-tezos-node:8732/
    # provided via secrets
    # ConnectionStrings__DefaultConnection:
